import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonPollType, Message

from variables import questions_registration, User, instructions
from connector import save_user_to_db, get_payments, save_user_payment, get_payment_details, get_payment_id_for_nomination

from dotenv import load_dotenv
import os

load_dotenv()

TOKEN = os.getenv("TOKEN_BOT")

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

def generate_ReplyKeyboard(text_buttons, row_width = 1):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = list()
    for text_button in text_buttons:
        buttons.append(KeyboardButton(text_button))
    markup.add(*buttons, row_width=row_width)
    return markup

def send_long_message(user_id, text):
    # –†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 4000
    for i in range(0, len(text), max_length):
        bot.send_message(user_id, text[i:i + max_length])

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    new_user = User(user_id)
    if new_user.is_registered:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        show_payments(message, new_user)
    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(user_id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        bot.send_message(user_id, questions_registration[new_user.current_question][1])
        bot.register_next_step_handler(message, registration_procedure, new_user)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É questions_registration. –í—ã–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã.
# –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å user_data –ø–æ –∫–ª—é—á–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞.
# –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç user_data –≤ –ë–î.
def registration_procedure(message, new_user):
    parameter_question = questions_registration[new_user.current_question][0]
    new_user.user_data[parameter_question] = message.text
    new_user.current_question += 1
    if new_user.current_question < len(questions_registration):
        bot.send_message(new_user.user_id, questions_registration[new_user.current_question][1])
        bot.register_next_step_handler(message, registration_procedure, new_user)
    else:
        new_user.is_registered = True
        new_user.user_data['user_id']= message.from_user.id
        save_user_to_db(new_user.user_data)
        print('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞:', new_user.user_data)
        bot.send_message(new_user.user_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞!')
        show_payments(message, new_user)

# –¥–æ—Å—Ç–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã –∏–∑ –±–¥, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤ —á–∞—Ç
# —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ id –≤—ã–ø–ª–∞—Ç
def show_payments(message, user_old):
    user_id = user_old.user_id
    payments = get_payments()
    text_list_payments = ''
    max_sumbol_in_row = 100
    for payment_id, nomination in payments:
        text_list_payments += f'{payment_id}. {nomination}\n{"-"*max_sumbol_in_row}\n'
    bot.send_message(user_id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:\n{text_list_payments}")
    markup = generate_ReplyKeyboard([i for i in range(1, len(payments)+1)], 4)
    bot.send_message(user_id, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=markup)

    #–û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id –≤—ã–ø–ª–∞—Ç—ã
    bot.register_next_step_handler(message, handler_choice_payment, user_old, payments)

# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—ã–ø–ª–∞—Ç—ã
# –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
def handler_choice_payment(message, user_old, payments):
    user_id = user_old.user_id
    try:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
        if message.text in [str(i) for i in range(1, len(payments)+1)]:
            id_payment = int(message.text)
            info_payment = get_payment_details(id_payment)
            send_long_message(user_id, info_payment)
            available_events = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç"]
            markup = generate_ReplyKeyboard(available_events)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–µ—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=markup)
            bot.register_next_step_handler(message, send_info_get_payment, user_old, id_payment, available_events)
        else:
            markup = generate_ReplyKeyboard([i for i in range(1, len(payments) + 1)], 4)
            bot.send_message(user_id, '–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö!', reply_markup=markup)
            bot.register_next_step_handler(message, handler_choice_payment, user_old, payments)
    except Exception as E:
        print(E)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É. –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
def send_info_get_payment(message, user_old, id_payment, available_events):
    user_id = user_old.user_id
    if message.text in available_events:
        if message.text == available_events[0]:
            available_events = ["–î–∞, —è –ø–æ–ª—É—á–∏–ª –≤—ã–ø–ª–∞—Ç—É", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç"]
            bot.send_message(user_id, instructions)
            markup = generate_ReplyKeyboard(available_events)
            bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É!", reply_markup=markup)
            bot.register_next_step_handler(message, confirmation_payment, user_old, id_payment, available_events)
        else:
            show_payments(message, user_old)
    else:
        markup = generate_ReplyKeyboard(available_events)
        bot.send_message(message, "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö!", reply_markup=markup)
        bot.register_next_step_handler(message, send_info_get_payment, user_old, id_payment, available_events)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–µ—Ç –≤ –±–¥
def confirmation_payment(message, user_old, id_payment, available_events):
    user_id = user_old.user_id
    if message.text in available_events:
        if message.text == available_events[0]:
            save_user_payment(user_id, id_payment)
            available_events = ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°Ô∏è"]
            markup = generate_ReplyKeyboard(available_events)
            bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòÅüôè\n–ù–∞–∂–º–∏—Ç–µ, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°Ô∏è", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç', reply_markup=markup)
            bot.register_next_step_handler(message, return_selection, user_old)
        else:
            show_payments(message, user_old)
    else:
        markup = generate_ReplyKeyboard(available_events)
        bot.send_message(message, "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö!", reply_markup=markup)
        bot.register_next_step_handler(message, send_info_get_payment, user_old, id_payment, available_events)

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤—ã–ø–ª–∞—Ç, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
def return_selection(message, user_old):
    show_payments(message, user_old)

@bot.message_handler(func=lambda message: True)
def handle_payment_selection(message):
    pass

bot.polling(none_stop=True)